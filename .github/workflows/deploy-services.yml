name: Deploy services

on:
  push:
    # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#example-including-and-excluding-paths
    paths:
      - ".github/workflows/**"
      - "deployments/**"
      - "build/**"
      - "!build/template-frontend/**"
      - "!build/template-go/**"
      - "!build/chat-server/**"
      - "!build/chat-app/**"

# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs#example-only-cancel-in-progress-jobs-on-specific-branches
# https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# https://github.com/actions/runner/issues/520
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#using-the-env-context-to-access-environment-variable-values
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#using-secrets-in-a-workflow
env:
  DEPLOYMENT_ACTIVE: true

jobs:
  check-deployment-status:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      enabled: ${{ steps.status.outputs.enabled }}
    steps:
      - name: Check deployment status
        id: status
        run: |
          echo "enabled=${{ env.DEPLOYMENT_ACTIVE }}" >> $GITHUB_OUTPUT

  backup-deployment-config:
    runs-on: ubuntu-latest
    needs: [check-deployment-status]
    if: github.ref == 'refs/heads/master' && ${{ needs.check-deployment-status.outputs.enabled == 'true' }}
    steps:
      - name: Back-up deployment config
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            rm -rf ~/deployments.bak
            mv ~/deployments ~/deployments.bak
            mkdir ~/deployments

  sync-deployment-configuration:
    runs-on: ubuntu-latest
    needs: [check-deployment-status, backup-deployment-config]
    if: github.ref == 'refs/heads/master' && ${{ needs.check-deployment-status.outputs.enabled == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Substitute acme email
        run: |
          mv deployments/traefik-template.yml deployments/traefik.yml
          sed -i 's/${EMAIL_TO_BE_REPLACED}/${{ secrets.ACME_EMAIL }}/g' deployments/traefik.yml
      - name: Configure docker-compose deployment
        # https://deploy-preview-13474--docsdocker.netlify.app/compose/env-file/#compose-2x
        run: |
          echo "ENV_USER_DATABASE_PASSWORD=$USER_SERVICE_DATABASE_PASSWORD" >> ./deployments/.env
          echo "ENV_GALACTIC_SOVEREIGN_DATABASE_PASSWORD=$GALACTIC_SOVEREIGN_DATABASE_PASSWORD" >> ./deployments/.env
          echo "WEBSITE_LOBBY_ORIGIN=${{ secrets.WEBSITE_LOBBY_ORIGIN }}" >> ./deployments/.env
          echo "USER_DASHBOARD_ORIGIN=${{ secrets.USER_DASHBOARD_ORIGIN }}" >> ./deployments/.env
          echo "GALACTIC_SOVEREIGN_FRONTEND_ORIGIN=${{ secrets.GALACTIC_SOVEREIGN_FRONTEND_ORIGIN }}" >> ./deployments/.env
          echo "QWIXX_SHEET_FRONTEND_ORIGIN=${{ secrets.QWIXX_SHEET_FRONTEND_ORIGIN }}" >> ./deployments/.env
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> ./deployments/.env
          echo "TRAEFIK_USER=${{ secrets.TRAEFIK_USER }}" >> ./deployments/.env
          echo "TRAEFIK_HASHED_PASSWORD='"'${{ secrets.TRAEFIK_HASHED_PASSWORD }}'"'" >> ./deployments/.env
        env:
          # https://github.com/orgs/community/discussions/25651#discussioncomment-4999768
          USER_SERVICE_DATABASE_PASSWORD: ${{ secrets.USER_SERVICE_DATABASE_MANAGER_PASSWORD }}
          GALACTIC_SOVEREIGN_DATABASE_PASSWORD: ${{ secrets.GALACTIC_SOVEREIGN_DATABASE_MANAGER_PASSWORD }}
      - name: Configure service tags
        run: |
          echo "USER_SERVICE_TAG=$(cat ./build/user-service/version.txt)" >> ./deployments/.env
          echo "GALACTIC_SOVEREIGN_SERVICE_TAG=$(cat ./build/galactic-sovereign-service/version.txt)" >> ./deployments/.env
          echo "WEBSITE_LOBBY_TAG=$(cat ./build/website-lobby/version.txt)" >> ./deployments/.env
          echo "USER_DASHBOARD_TAG=$(cat ./build/user-dashboard/version.txt)" >> ./deployments/.env
          echo "GALACTIC_SOVEREIGN_FRONTEND_TAG=$(cat ./build/galactic-sovereign-frontend/version.txt)" >> ./deployments/.env
          echo "QWIXX_SHEET_FRONTEND_TAG=$(cat ./build/qwixx-sheet-frontend/version.txt)" >> ./deployments/.env
      - name: Install SSH keys
        # https://dev.to/zellwk/deploying-to-a-server-via-ssh-and-rsync-in-a-github-action-2acd
        # See step 5 to generate the known_hosts
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_DEPLOY_SSH_KNOWN_HOSTS }}
      - name: Sync deployment configuration
        # https://www.tecmint.com/rsync-local-remote-file-synchronization-commands/#3_Copy_a_Directory_from_Local_to_Remote_Server
        run: |
          rsync -avzh ./deployments ubuntu@${{ secrets.EC2_DEPLOY_HOST }}:/home/ubuntu/

  deploy:
    runs-on: ubuntu-latest
    needs: [check-deployment-status, sync-deployment-configuration]
    if: github.ref == 'refs/heads/master' && ${{ needs.check-deployment-status.outputs.enabled == 'true' }}
    steps:
      - name: Deploy latest services version
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            docker compose -f ./deployments/compose.yaml up -d --remove-orphans

  clean-deployment-config-backup:
    runs-on: ubuntu-latest
    needs: [check-deployment-status, deploy]
    if: github.ref == 'refs/heads/master' && ${{ needs.check-deployment-status.outputs.enabled == 'true' }}
    steps:
      - name: Clean back-up of deployment config
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            rm -rf ~/deployments.bak
