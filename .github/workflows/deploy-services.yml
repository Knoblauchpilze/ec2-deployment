name: Deploy services

on:
  push:
    # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#example-including-and-excluding-paths
    paths:
      - ".github/workflows/**"
      - "deployments/**"
      - "build/**"
      - "!build/template-frontend/**"
      - "!build/template-go/**"
      - "!build/chat-server/**"
      - "!build/chat-app/**"

# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs#example-only-cancel-in-progress-jobs-on-specific-branches
# https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # https://github.com/dorny/paths-filter
  detect-code-changes:
    runs-on: ubuntu-latest
    outputs:
      ci: ${{ steps.filter.outputs.ci }}
      deployment: ${{ steps.filter.outputs.deployment }}
      services: ${{ steps.filter.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref_name }}
          filters: |
            ci:
              - '.github/workflows/**'
            deployment:
              - 'deployments/**'
            services:
              - 'build/**'
  analyze-deploy-status:
    runs-on: ubuntu-latest
    needs: [detect-code-changes]
    outputs:
      deploy-services: ${{ steps.deploy-services.outputs.deploy }}
    steps:
      - name: Detect if services should be deployed
        id: deploy-services
        run: |
          echo 'deploy=${{ (github.ref == 'refs/heads/master') && (needs.detect-code-changes.outputs.ci == 'true' || needs.detect-code-changes.outputs.deployment == 'true' || needs.detect-code-changes.outputs.services == 'true') }}' >> $GITHUB_OUTPUT
  backup-deployment-config:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: [analyze-deploy-status]
    # https://github.com/actions/runner/issues/491
    # https://github.com/actions/runner/issues/2205#issuecomment-1400087739
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.analyze-deploy-status.outputs.deploy-services == 'true'
    steps:
      - name: Back-up deployment config
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            rm -rf ~/deployments.bak
            mv ~/deployments ~/deployments.bak
            mkdir ~/deployments
  sync-deployment-configuration:
    runs-on: ubuntu-latest
    needs: [backup-deployment-config, analyze-deploy-status]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.analyze-deploy-status.outputs.deploy-services == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Substitute acme email
        run: |
          mv deployments/traefik-template.yml deployments/traefik.yml
          sed -i 's/${EMAIL_TO_BE_REPLACED}/${{ secrets.ACME_EMAIL }}/g' deployments/traefik.yml
      - name: Configure docker-compose deployment
        # https://deploy-preview-13474--docsdocker.netlify.app/compose/env-file/#compose-2x
        run: |
          echo "ENV_USER_DATABASE_PASSWORD=$USER_SERVICE_DATABASE_PASSWORD" >> ./deployments/.env
          echo "ENV_GALACTIC_SOVEREIGN_DATABASE_PASSWORD=$GALACTIC_SOVEREIGN_DATABASE_PASSWORD" >> ./deployments/.env
          echo "WEBSITE_LOBBY_ORIGIN=${{ secrets.WEBSITE_LOBBY_ORIGIN }}" >> ./deployments/.env
          echo "USER_DASHBOARD_ORIGIN=${{ secrets.USER_DASHBOARD_ORIGIN }}" >> ./deployments/.env
          echo "GALACTIC_SOVEREIGN_FRONTEND_ORIGIN=${{ secrets.GALACTIC_SOVEREIGN_FRONTEND_ORIGIN }}" >> ./deployments/.env
          echo "QWIXX_SHEET_FRONTEND_ORIGIN=${{ secrets.QWIXX_SHEET_FRONTEND_ORIGIN }}" >> ./deployments/.env
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> ./deployments/.env
          echo "TRAEFIK_USER=${{ secrets.TRAEFIK_USER }}" >> ./deployments/.env
          echo "TRAEFIK_HASHED_PASSWORD='"'${{ secrets.TRAEFIK_HASHED_PASSWORD }}'"'" >> ./deployments/.env
        env:
          # https://github.com/orgs/community/discussions/25651#discussioncomment-4999768
          USER_SERVICE_DATABASE_PASSWORD: ${{ secrets.USER_SERVICE_DATABASE_MANAGER_PASSWORD }}
          GALACTIC_SOVEREIGN_DATABASE_PASSWORD: ${{ secrets.GALACTIC_SOVEREIGN_DATABASE_MANAGER_PASSWORD }}
      - name: Configure service tags
        run: |
          echo "USER_SERVICE_TAG=$(cat ./build/user-service/version.txt)" >> ./deployments/.env
          echo "GALACTIC_SOVEREIGN_SERVICE_TAG=$(cat ./build/galactic-sovereign-service/version.txt)" >> ./deployments/.env
          echo "WEBSITE_LOBBY_TAG=$(cat ./build/website-lobby/version.txt)" >> ./deployments/.env
          echo "USER_DASHBOARD_TAG=$(cat ./build/user-dashboard/version.txt)" >> ./deployments/.env
          echo "GALACTIC_SOVEREIGN_FRONTEND_TAG=$(cat ./build/galactic-sovereign-frontend/version.txt)" >> ./deployments/.env
          echo "QWIXX_SHEET_FRONTEND_TAG=$(cat ./build/qwixx-sheet-frontend/version.txt)" >> ./deployments/.env
      - name: Install SSH keys
        # https://dev.to/zellwk/deploying-to-a-server-via-ssh-and-rsync-in-a-github-action-2acd
        # See step 5 to generate the known_hosts
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_DEPLOY_SSH_KNOWN_HOSTS }}
      - name: Sync deployment configuration
        # https://www.tecmint.com/rsync-local-remote-file-synchronization-commands/#3_Copy_a_Directory_from_Local_to_Remote_Server
        run: |
          rsync -avzh ./deployments ubuntu@${{ secrets.EC2_DEPLOY_HOST }}:/home/ubuntu/
  deploy:
    runs-on: ubuntu-latest
    needs: [analyze-deploy-status, sync-deployment-configuration]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.analyze-deploy-status.outputs.deploy-services == 'true'
    steps:
      - name: Deploy latest services version
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            docker compose -f ./deployments/compose.yaml up -d --remove-orphans
  clean-deployment-config-backup:
    runs-on: ubuntu-latest
    needs: [analyze-deploy-status, deploy]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.analyze-deploy-status.outputs.deploy-services == 'true'
    steps:
      - name: Clean back-up of deployment config
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.EC2_DEPLOY_HOST }}"
          username: ubuntu
          key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
          script: |
            rm -rf ~/deployments.bak
